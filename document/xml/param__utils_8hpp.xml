<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="param__utils_8hpp" kind="file" language="C++">
    <compoundname>param_utils.hpp</compoundname>
    <includes refid="integrate__core_8hpp" local="yes">integrate_core.hpp</includes>
    <includes local="no">boost/math/interpolators/makima.hpp</includes>
    <includedby refid="non__param__eos_8cpp" local="yes">/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/non_param_eos.cpp</includedby>
    <includedby refid="non__param__utils_8hpp" local="yes">/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/non_param_utils.hpp</includedby>
    <includedby refid="param__eos_8cpp" local="yes">/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_eos.cpp</includedby>
    <incdepgraph>
      <node id="21">
        <label>boost/math/interpolators/makima.hpp</label>
      </node>
      <node id="19">
        <label>gsl/gsl_const_cgs.h</label>
      </node>
      <node id="3">
        <label>boost/numeric/odeint/stepper/controlled_runge_kutta.hpp</label>
      </node>
      <node id="11">
        <label>cmath</label>
      </node>
      <node id="10">
        <label>string</label>
      </node>
      <node id="18">
        <label>map</label>
      </node>
      <node id="7">
        <label>exception</label>
      </node>
      <node id="9">
        <label>fstream</label>
      </node>
      <node id="4">
        <label>boost/numeric/odeint/stepper/runge_kutta_fehlberg78.hpp</label>
      </node>
      <node id="14">
        <label>vector</label>
      </node>
      <node id="16">
        <label>gsl/gsl_roots.h</label>
      </node>
      <node id="13">
        <label>quark_star_utils.hpp</label>
        <link refid="quark__star__utils_8hpp"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>array</label>
      </node>
      <node id="17">
        <label>global_variable_constants.hpp</label>
        <link refid="global__variable__constants_8hpp"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>iostream</label>
      </node>
      <node id="1">
        <label>/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp</label>
        <link refid="param__utils_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>boost/numeric/odeint/integrate/integrate_const.hpp</label>
      </node>
      <node id="20">
        <label>data.hpp</label>
        <link refid="data_8hpp"/>
      </node>
      <node id="2">
        <label>integrate_core.hpp</label>
        <link refid="integrate__core_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>boost/numeric/odeint/integrate/integrate_adaptive.hpp</label>
      </node>
      <node id="15">
        <label>gsl/gsl_errno.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_eos.cpp</label>
        <link refid="param__eos_8cpp"/>
      </node>
      <node id="3">
        <label>/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/non_param_utils.hpp</label>
        <link refid="non__param__utils_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp</label>
        <link refid="param__utils_8hpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/non_param_eos.cpp</label>
        <link refid="non__param__eos_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="param__utils_8hpp_1a54b1ccb702b0746a0fb52c4862210696" prot="public" static="no">
        <name>fail_process</name>
        <param></param>
        <initializer>*h_closest = -1; *unknown=0; return false;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" line="340" column="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="param__utils_8hpp_1a868be24c590ade0f629c8d2135ab0229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double *</type>
        <definition>double * get_mrl</definition>
        <argsstring>(double hc)</argsstring>
        <name>get_mrl</name>
        <param>
          <type>double</type>
          <declname>hc</declname>
        </param>
        <briefdescription>
<para>Python interface function for integrating the whole structure of the star. </para>
        </briefdescription>
        <detaileddescription>
<para>Give h_c, get M/M_sun, R/km and L, which are stored in global variable double *mrl_result. <simplesect kind="attention"><para>Use this for python control only, because double* is convenient for python, and global variable is needed, <linebreak/>
 which may cause confuse problem if used in c++ main, so please use int_whole_star instead for c++, because that do not need to return global variable. </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hc</parametername>
</parameternamelist>
<parameterdescription>
<para>enthalpy at the center of the compact star. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" line="37" column="8" bodyfile="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" bodystart="37" bodyend="49" declfile="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" declline="20" declcolumn="12"/>
        <references refid="integrate__core_8hpp_1ac44351f385d2bf728eb529d1d0a640c2" compoundref="integrate__core_8hpp" startline="71" endline="72">cal_lambda</references>
        <references refid="integrate__core_8hpp_1a11213979acaf22876fc5c366b30f6823" compoundref="integrate__core_8hpp" startline="307" endline="347">int_whole_star</references>
        <references refid="global__variable__constants_8hpp_1ad7f1aa953dc63f3be1a546da18a3c2aa" compoundref="global__variable__constants_8hpp" startline="54">mrl_result</references>
        <references refid="global__variable__constants_8hpp_1a172789dfdaecb45defd22444f4272dc2" compoundref="global__variable__constants_8hpp" startline="82">r_trans</references>
        <references refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" compoundref="global__variable__constants_8hpp" startline="40">verbose</references>
        <referencedby refid="param__utils_8hpp_1ab3c5a1a854e42b8e307ade519a977980" compoundref="param__utils_8hpp" startline="397" endline="427">get_unknowns_from_knowns</referencedby>
        <referencedby refid="non__param__utils_8hpp_1a0242b489eaaa0afb9df3c4f5e81cb8e4" compoundref="non__param__utils_8hpp" startline="32" endline="107">non_param_like</referencedby>
      </memberdef>
      <memberdef kind="function" id="param__utils_8hpp_1a2fe9fce9a25e7626896dc000d3ad374a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool check_eos</definition>
        <argsstring>(double *hc)</argsstring>
        <name>check_eos</name>
        <param>
          <type>double *</type>
          <declname>hc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" line="150" column="6" bodyfile="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" bodystart="150" bodyend="190" declfile="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" declline="21" declcolumn="10"/>
        <references refid="global__variable__constants_8hpp_1add31440b5514ca384bc53145ccd4f1a6" compoundref="global__variable__constants_8hpp" startline="53">coeftb</references>
        <references refid="global__variable__constants_8hpp_1a623a8f9be8490ec6209c08d8e52fc929" compoundref="global__variable__constants_8hpp" startline="52">coeftb_idx</references>
        <references refid="integrate__core_8hpp_1a592868baedb54b8f932ec01e852995d4">controlled_stepper</references>
        <references refid="global__variable__constants_8hpp_1a541be2f598d25b67abfecd6bd6bd918f" compoundref="global__variable__constants_8hpp" startline="84">e_0</references>
        <references refid="integrate__core_8hpp_1a5bd395991f95231deed00b9a52bffecd" compoundref="integrate__core_8hpp" startline="76" endline="80">eh</references>
        <references refid="quark__star__utils_8hpp_1ac6fc12ffe5a897dd97b16e2142ee6b48" compoundref="quark__star__utils_8hpp" startline="30" endline="30">eh_qks</references>
        <references refid="global__variable__constants_8hpp_1a4e025832d3a1a33270a793ab654db08c" compoundref="global__variable__constants_8hpp" startline="56">eos_params</references>
        <references refid="integrate__core_8hpp_1a1b6052908270e18510683b79741a7b8a" compoundref="integrate__core_8hpp" startline="148" endline="156">gamma_which</references>
        <references refid="integrate__core_8hpp_1a3c6882bb4d37f66684a037145b64abfd" compoundref="integrate__core_8hpp" startline="84" endline="84">gammah_interpolation</references>
        <references refid="quark__star__utils_8hpp_1a894121d0ec2087fe413b0a7803f2f204" compoundref="quark__star__utils_8hpp" startline="32" endline="39">gammah_qks</references>
        <references refid="global__variable__constants_8hpp_1a87bbbc70d878aee06e41cfacf614dfb1" compoundref="global__variable__constants_8hpp" startline="86">h_0</references>
        <references refid="integrate__core_8hpp_1a0b7bb81f4629a3a900a765d0d9a6f168" compoundref="integrate__core_8hpp" startline="242" endline="271">integrate_func</references>
        <references refid="global__variable__constants_8hpp_1a2ce9aef0de35008e21974dfb785c10fc" compoundref="global__variable__constants_8hpp" startline="24">interp_only</references>
        <references refid="integrate__core_8hpp_1a7d14308d810a0df831ad2eda66249fe0" compoundref="integrate__core_8hpp" startline="230" endline="233">outer_to_inner</references>
        <references refid="global__variable__constants_8hpp_1adad155522ac7592916e3c332a2682963" compoundref="global__variable__constants_8hpp" startline="85">p_0</references>
        <references refid="integrate__core_8hpp_1a8ad4cb6876fef3c488b0dc9067bdf035" compoundref="integrate__core_8hpp" startline="82" endline="82">ph</references>
        <references refid="quark__star__utils_8hpp_1a270550ca7295802d7a80068ad867aec0" compoundref="quark__star__utils_8hpp" startline="29" endline="29">ph_qks</references>
        <references refid="global__variable__constants_8hpp_1adf7a1978875a4e1d3f641e1c7d13d225" compoundref="global__variable__constants_8hpp" startline="30">quark_star</references>
        <references refid="global__variable__constants_8hpp_1a41540773134a59f15f5908d1167c3c3a" compoundref="global__variable__constants_8hpp" startline="76">sg_step</references>
        <references refid="global__variable__constants_8hpp_1ab352375cec5c5cea5f0654ab2a1a1807" compoundref="global__variable__constants_8hpp" startline="61">suggested_start_point</references>
        <references refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" compoundref="global__variable__constants_8hpp" startline="40">verbose</references>
        <referencedby refid="param__utils_8hpp_1ae0c3cf3b70f141f42bcf48270238ebe7" compoundref="param__utils_8hpp" startline="202" endline="262">check_mmax</referencedby>
      </memberdef>
      <memberdef kind="function" id="param__utils_8hpp_1ae0c3cf3b70f141f42bcf48270238ebe7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool check_mmax</definition>
        <argsstring>(double *hc, double *M_max)</argsstring>
        <name>check_mmax</name>
        <param>
          <type>double *</type>
          <declname>hc</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>M_max</declname>
        </param>
        <briefdescription>
<para>Find non-rotating maximum supported mass of an EoS. </para>
        </briefdescription>
        <detaileddescription>
<para>The challenge is the &quot;noise&quot; or none monotonicity property, the solution is:<orderedlist>
<listitem><para>A bigger guard to check again, 2. Judge whether a step before is larger. error: ~0.005 M_sun <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hc</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the central enthalpy, return -1 if finding error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>M_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the maximum mass, return 0 if finding error. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>bool</parametername>
</parameternamelist>
<parameterdescription>
<para>whether finding process correctly worked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
</listitem></orderedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" line="202" column="6" bodyfile="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" bodystart="202" bodyend="262" declfile="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" declline="22" declcolumn="10"/>
        <references refid="global__variable__constants_8hpp_1ac10fdca83ba95668d86ff24ac666803d" compoundref="global__variable__constants_8hpp" startline="59">check_causal</references>
        <references refid="param__utils_8hpp_1a2fe9fce9a25e7626896dc000d3ad374a" compoundref="param__utils_8hpp" startline="150" endline="190">check_eos</references>
        <references refid="integrate__core_8hpp_1a11213979acaf22876fc5c366b30f6823" compoundref="integrate__core_8hpp" startline="307" endline="347">int_whole_star</references>
        <references refid="global__variable__constants_8hpp_1aa8ac37cbfe75c0314bf944fa1939bef4" compoundref="global__variable__constants_8hpp" startline="45">maxm_tov</references>
        <references refid="global__variable__constants_8hpp_1a7a11e492a812c7256c33d342ce4caea4" compoundref="global__variable__constants_8hpp" startline="60">minimum_allowed_h</references>
        <references refid="global__variable__constants_8hpp_1a3de327fde01c89d6993a82ac06db5af6" compoundref="global__variable__constants_8hpp" startline="44">minm_tov</references>
        <references refid="global__variable__constants_8hpp_1ab352375cec5c5cea5f0654ab2a1a1807" compoundref="global__variable__constants_8hpp" startline="61">suggested_start_point</references>
        <references refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" compoundref="global__variable__constants_8hpp" startline="40">verbose</references>
        <referencedby refid="param__utils_8hpp_1ab3c5a1a854e42b8e307ade519a977980" compoundref="param__utils_8hpp" startline="397" endline="427">get_unknowns_from_knowns</referencedby>
        <referencedby refid="non__param__utils_8hpp_1a0242b489eaaa0afb9df3c4f5e81cb8e4" compoundref="non__param__utils_8hpp" startline="32" endline="107">non_param_like</referencedby>
      </memberdef>
      <memberdef kind="function" id="param__utils_8hpp_1a14167c28cd95816df5e1d80810fd7886" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void make_eos_table</definition>
        <argsstring>(double h_start, double h_end, double dh, int precision, char *f_name, const char *unit=&quot;cgs&quot;)</argsstring>
        <name>make_eos_table</name>
        <param>
          <type>double</type>
          <declname>h_start</declname>
        </param>
        <param>
          <type>double</type>
          <declname>h_end</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dh</declname>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>f_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>unit</declname>
          <defval>&quot;cgs&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" line="107" column="6" bodyfile="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" bodystart="107" bodyend="121" declfile="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" declline="23" declcolumn="10"/>
        <references refid="param__utils_8hpp_1a0e5c0924c152182239b53b638717efcc" compoundref="param__utils_8hpp" startline="51" endline="105">integrate_eos</references>
        <references refid="global__variable__constants_8hpp_1a7c49c7d65b3c65eb7a9a457c905f6564" compoundref="global__variable__constants_8hpp" startline="81">p_trans</references>
        <references refid="global__variable__constants_8hpp_1a42f01033db7468aff2667011bb543c07" compoundref="global__variable__constants_8hpp" startline="80">rho_trans</references>
        <references refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" compoundref="global__variable__constants_8hpp" startline="40">verbose</references>
        <referencedby refid="param__eos_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="param__eos_8cpp" startline="35" endline="139">main</referencedby>
      </memberdef>
      <memberdef kind="function" id="param__utils_8hpp_1ab3c5a1a854e42b8e307ade519a977980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool get_unknowns_from_knowns</definition>
        <argsstring>(double known1, double known2, double *unknown1, double *unknown2, double *h_max, int get_type)</argsstring>
        <name>get_unknowns_from_knowns</name>
        <param>
          <type>double</type>
          <declname>known1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>known2</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>unknown1</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>unknown2</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>h_max</declname>
        </param>
        <param>
          <type>int</type>
          <declname>get_type</declname>
        </param>
        <briefdescription>
<para>find nearest known property, return corresponding unknown ones. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>known1</parametername>
</parameternamelist>
<parameterdescription>
<para>Known global 1 to find with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>known2</parametername>
</parameternamelist>
<parameterdescription>
<para>Known global 2 to find with. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unknown1</parametername>
</parameternamelist>
<parameterdescription>
<para>Unknown global 1 to be found. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unknown2</parametername>
</parameternamelist>
<parameterdescription>
<para>Unknown global 2 to be found. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to stare maximum enthalpy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>get_type</parametername>
</parameternamelist>
<parameterdescription>
<para>1. mass to lambda; 2. mass to radius; 3. lambda to mass. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>bool</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether finding process correctly worked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" line="397" column="6" bodyfile="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" bodystart="397" bodyend="427" declfile="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" declline="24" declcolumn="10"/>
        <references refid="param__utils_8hpp_1ae0c3cf3b70f141f42bcf48270238ebe7" compoundref="param__utils_8hpp" startline="202" endline="262">check_mmax</references>
        <references refid="param__utils_8hpp_1addc6708baf1b3023282c5f1a83a8608a" compoundref="param__utils_8hpp" startline="332" endline="385">find_closest_with_maxm_known</references>
        <references refid="param__utils_8hpp_1a868be24c590ade0f629c8d2135ab0229" compoundref="param__utils_8hpp" startline="37" endline="49">get_mrl</references>
        <references refid="global__variable__constants_8hpp_1ad7f1aa953dc63f3be1a546da18a3c2aa" compoundref="global__variable__constants_8hpp" startline="54">mrl_result</references>
        <references refid="global__variable__constants_8hpp_1ab352375cec5c5cea5f0654ab2a1a1807" compoundref="global__variable__constants_8hpp" startline="61">suggested_start_point</references>
      </memberdef>
      <memberdef kind="function" id="param__utils_8hpp_1a55d55d86595704afa06a9ad23234d8ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool find_closest</definition>
        <argsstring>(double m_aim, double h_i, double h_max, double *h_closest, double *lambda, bool use_user_start_point=false)</argsstring>
        <name>find_closest</name>
        <param>
          <type>double</type>
          <declname>m_aim</declname>
        </param>
        <param>
          <type>double</type>
          <declname>h_i</declname>
        </param>
        <param>
          <type>double</type>
          <declname>h_max</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>h_closest</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>lambda</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_user_start_point</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" line="264" column="6" bodyfile="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" bodystart="264" bodyend="319" declfile="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" declline="25" declcolumn="10"/>
        <references refid="integrate__core_8hpp_1ac44351f385d2bf728eb529d1d0a640c2" compoundref="integrate__core_8hpp" startline="71" endline="72">cal_lambda</references>
        <references refid="integrate__core_8hpp_1a11213979acaf22876fc5c366b30f6823" compoundref="integrate__core_8hpp" startline="307" endline="347">int_whole_star</references>
        <references refid="global__variable__constants_8hpp_1a7a11e492a812c7256c33d342ce4caea4" compoundref="global__variable__constants_8hpp" startline="60">minimum_allowed_h</references>
        <references refid="global__variable__constants_8hpp_1ab352375cec5c5cea5f0654ab2a1a1807" compoundref="global__variable__constants_8hpp" startline="61">suggested_start_point</references>
        <references refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" compoundref="global__variable__constants_8hpp" startline="40">verbose</references>
      </memberdef>
      <memberdef kind="function" id="param__utils_8hpp_1addc6708baf1b3023282c5f1a83a8608a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool find_closest_with_maxm_known</definition>
        <argsstring>(double known_aim, double h_i, double h_max, double *h_closest, double *unknown, int get_type, bool use_user_start_point)</argsstring>
        <name>find_closest_with_maxm_known</name>
        <param>
          <type>double</type>
          <declname>known_aim</declname>
        </param>
        <param>
          <type>double</type>
          <declname>h_i</declname>
        </param>
        <param>
          <type>double</type>
          <declname>h_max</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>h_closest</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>unknown</declname>
        </param>
        <param>
          <type>int</type>
          <declname>get_type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_user_start_point</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Find a global_a with another global_b. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>known_aim</parametername>
</parameternamelist>
<parameterdescription>
<para>Global_b. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h_i</parametername>
</parameternamelist>
<parameterdescription>
<para>Initial guess. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h_max</parametername>
</parameternamelist>
<parameterdescription>
<para>Known maximum enthalpy. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h_closest</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the closest enthalpy, return -1 if finding error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>unknown</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the global_a to be found, return 0 if finding error. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>get_type</parametername>
</parameternamelist>
<parameterdescription>
<para>1. mass to lambda; 2. mass to radius; 3. lambda to mass. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>use_user_start_point</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to use user specified initial guess h_i or use system default value. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>bool</parametername>
</parameternamelist>
<parameterdescription>
<para>whether finding process correctly worked. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" line="332" column="6" bodyfile="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" bodystart="332" bodyend="385" declfile="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" declline="26" declcolumn="10"/>
        <references refid="integrate__core_8hpp_1ac44351f385d2bf728eb529d1d0a640c2" compoundref="integrate__core_8hpp" startline="71" endline="72">cal_lambda</references>
        <references refid="param__utils_8hpp_1a54b1ccb702b0746a0fb52c4862210696">fail_process</references>
        <references refid="integrate__core_8hpp_1a11213979acaf22876fc5c366b30f6823" compoundref="integrate__core_8hpp" startline="307" endline="347">int_whole_star</references>
        <references refid="global__variable__constants_8hpp_1a7a11e492a812c7256c33d342ce4caea4" compoundref="global__variable__constants_8hpp" startline="60">minimum_allowed_h</references>
        <references refid="global__variable__constants_8hpp_1a172789dfdaecb45defd22444f4272dc2" compoundref="global__variable__constants_8hpp" startline="82">r_trans</references>
        <references refid="global__variable__constants_8hpp_1ab352375cec5c5cea5f0654ab2a1a1807" compoundref="global__variable__constants_8hpp" startline="61">suggested_start_point</references>
        <references refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" compoundref="global__variable__constants_8hpp" startline="40">verbose</references>
        <referencedby refid="param__utils_8hpp_1ab3c5a1a854e42b8e307ade519a977980" compoundref="param__utils_8hpp" startline="397" endline="427">get_unknowns_from_knowns</referencedby>
      </memberdef>
      <memberdef kind="function" id="param__utils_8hpp_1a0e5c0924c152182239b53b638717efcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool integrate_eos</definition>
        <argsstring>(double h_start, double h_end, double dh, state_type *h_tb, state_type *p_tb, state_type *e_tb, state_type *rho_tb, state_type *gamma_tb, state_type *v_sq_tb)</argsstring>
        <name>integrate_eos</name>
        <param>
          <type>double</type>
          <declname>h_start</declname>
        </param>
        <param>
          <type>double</type>
          <declname>h_end</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dh</declname>
        </param>
        <param>
          <type><ref refid="global__variable__constants_8hpp_1a6cafdeced917cafef4bfae2ebf42f082" kindref="member">state_type</ref> *</type>
          <declname>h_tb</declname>
        </param>
        <param>
          <type><ref refid="global__variable__constants_8hpp_1a6cafdeced917cafef4bfae2ebf42f082" kindref="member">state_type</ref> *</type>
          <declname>p_tb</declname>
        </param>
        <param>
          <type><ref refid="global__variable__constants_8hpp_1a6cafdeced917cafef4bfae2ebf42f082" kindref="member">state_type</ref> *</type>
          <declname>e_tb</declname>
        </param>
        <param>
          <type><ref refid="global__variable__constants_8hpp_1a6cafdeced917cafef4bfae2ebf42f082" kindref="member">state_type</ref> *</type>
          <declname>rho_tb</declname>
        </param>
        <param>
          <type><ref refid="global__variable__constants_8hpp_1a6cafdeced917cafef4bfae2ebf42f082" kindref="member">state_type</ref> *</type>
          <declname>gamma_tb</declname>
        </param>
        <param>
          <type><ref refid="global__variable__constants_8hpp_1a6cafdeced917cafef4bfae2ebf42f082" kindref="member">state_type</ref> *</type>
          <declname>v_sq_tb</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" line="51" column="6" bodyfile="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" bodystart="51" bodyend="105"/>
        <references refid="integrate__core_8hpp_1a86f802d0af08d9982cd9d828e4ee52ae" compoundref="integrate__core_8hpp" startline="195" endline="200">cal_eos</references>
        <references refid="global__variable__constants_8hpp_1add31440b5514ca384bc53145ccd4f1a6" compoundref="global__variable__constants_8hpp" startline="53">coeftb</references>
        <references refid="global__variable__constants_8hpp_1a623a8f9be8490ec6209c08d8e52fc929" compoundref="global__variable__constants_8hpp" startline="52">coeftb_idx</references>
        <references refid="integrate__core_8hpp_1a592868baedb54b8f932ec01e852995d4">controlled_stepper</references>
        <references refid="global__variable__constants_8hpp_1a541be2f598d25b67abfecd6bd6bd918f" compoundref="global__variable__constants_8hpp" startline="84">e_0</references>
        <references refid="integrate__core_8hpp_1a5bd395991f95231deed00b9a52bffecd" compoundref="integrate__core_8hpp" startline="76" endline="80">eh</references>
        <references refid="quark__star__utils_8hpp_1ac6fc12ffe5a897dd97b16e2142ee6b48" compoundref="quark__star__utils_8hpp" startline="30" endline="30">eh_qks</references>
        <references refid="global__variable__constants_8hpp_1a4e025832d3a1a33270a793ab654db08c" compoundref="global__variable__constants_8hpp" startline="56">eos_params</references>
        <references refid="integrate__core_8hpp_1a1b6052908270e18510683b79741a7b8a" compoundref="integrate__core_8hpp" startline="148" endline="156">gamma_which</references>
        <references refid="quark__star__utils_8hpp_1a894121d0ec2087fe413b0a7803f2f204" compoundref="quark__star__utils_8hpp" startline="32" endline="39">gammah_qks</references>
        <references refid="global__variable__constants_8hpp_1a87bbbc70d878aee06e41cfacf614dfb1" compoundref="global__variable__constants_8hpp" startline="86">h_0</references>
        <references refid="integrate__core_8hpp_1a0b7bb81f4629a3a900a765d0d9a6f168" compoundref="integrate__core_8hpp" startline="242" endline="271">integrate_func</references>
        <references refid="global__variable__constants_8hpp_1a2ce9aef0de35008e21974dfb785c10fc" compoundref="global__variable__constants_8hpp" startline="24">interp_only</references>
        <references refid="global__variable__constants_8hpp_1adad155522ac7592916e3c332a2682963" compoundref="global__variable__constants_8hpp" startline="85">p_0</references>
        <references refid="integrate__core_8hpp_1a8ad4cb6876fef3c488b0dc9067bdf035" compoundref="integrate__core_8hpp" startline="82" endline="82">ph</references>
        <references refid="quark__star__utils_8hpp_1a270550ca7295802d7a80068ad867aec0" compoundref="quark__star__utils_8hpp" startline="29" endline="29">ph_qks</references>
        <references refid="global__variable__constants_8hpp_1adf7a1978875a4e1d3f641e1c7d13d225" compoundref="global__variable__constants_8hpp" startline="30">quark_star</references>
        <references refid="global__variable__constants_8hpp_1a4066e07b45853e6a2d87b1b350415257" compoundref="global__variable__constants_8hpp" startline="87">rho_0</references>
        <references refid="global__variable__constants_8hpp_1a41540773134a59f15f5908d1167c3c3a" compoundref="global__variable__constants_8hpp" startline="76">sg_step</references>
        <referencedby refid="param__utils_8hpp_1a14167c28cd95816df5e1d80810fd7886" compoundref="param__utils_8hpp" startline="107" endline="121">make_eos_table</referencedby>
      </memberdef>
      <memberdef kind="function" id="param__utils_8hpp_1acfe1c394a95dbbf2af74a7039baef8de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void make_tool_table</definition>
        <argsstring>(double minh, double maxh, double dh)</argsstring>
        <name>make_tool_table</name>
        <param>
          <type>double</type>
          <declname>minh</declname>
        </param>
        <param>
          <type>double</type>
          <declname>maxh</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dh</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" line="123" column="6" bodyfile="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp" bodystart="123" bodyend="142"/>
        <references refid="integrate__core_8hpp_1ac44351f385d2bf728eb529d1d0a640c2" compoundref="integrate__core_8hpp" startline="71" endline="72">cal_lambda</references>
        <references refid="integrate__core_8hpp_1a11213979acaf22876fc5c366b30f6823" compoundref="integrate__core_8hpp" startline="307" endline="347">int_whole_star</references>
        <references refid="global__variable__constants_8hpp_1a172789dfdaecb45defd22444f4272dc2" compoundref="global__variable__constants_8hpp" startline="82">r_trans</references>
        <referencedby refid="param__eos_8cpp_1a0ddf1224851353fc92bfbff6f499fa97" compoundref="param__eos_8cpp" startline="35" endline="139">main</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>PARAM_UTILS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PARAM_UTILS_HPP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include&quot;<ref refid="integrate__core_8hpp" kindref="compound">integrate_core.hpp</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include&lt;boost/math/interpolators/makima.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>boost::math::interpolators::makima;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//check<sp/>eos<sp/>&amp;<sp/>make<sp/>tool<sp/>table</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//important<sp/>global<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/><ref refid="param__utils_8hpp_1a868be24c590ade0f629c8d2135ab0229" kindref="member">get_mrl</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hc);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="param__utils_8hpp_1a2fe9fce9a25e7626896dc000d3ad374a" kindref="member">check_eos</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*hc);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="param__utils_8hpp_1ae0c3cf3b70f141f42bcf48270238ebe7" kindref="member">check_mmax</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*hc,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*M_max);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="param__utils_8hpp_1a14167c28cd95816df5e1d80810fd7886" kindref="member">make_eos_table</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_start,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_end,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dh,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*f_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*unit=</highlight><highlight class="stringliteral">&quot;cgs&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="param__utils_8hpp_1ab3c5a1a854e42b8e307ade519a977980" kindref="member">get_unknowns_from_knowns</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>known1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>known2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*unknown1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*unknown2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*h_max,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_type);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="param__utils_8hpp_1a55d55d86595704afa06a9ad23234d8ad" kindref="member">find_closest</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m_aim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_i,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_max,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*h_closest,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*lambda,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_user_start_point=</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="param__utils_8hpp_1addc6708baf1b3023282c5f1a83a8608a" kindref="member">find_closest_with_maxm_known</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>known_aim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_i,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_max,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*h_closest,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*unknown,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_type,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_user_start_point=</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="param__utils_8hpp_1a868be24c590ade0f629c8d2135ab0229" refkind="member"><highlight class="keywordtype">double</highlight><highlight class="normal">*<sp/><ref refid="param__utils_8hpp_1a868be24c590ade0f629c8d2135ab0229" kindref="member">get_mrl</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hc){</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="global__variable__constants_8hpp_1a6cafdeced917cafef4bfae2ebf42f082" kindref="member">state_type</ref><sp/>x_result(3);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x_result<sp/>=<sp/><ref refid="integrate__core_8hpp_1a11213979acaf22876fc5c366b30f6823" kindref="member">int_whole_star</ref>(hc);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="global__variable__constants_8hpp_1ad7f1aa953dc63f3be1a546da18a3c2aa" kindref="member">mrl_result</ref>[0]<sp/>=<sp/>x_result[0],<sp/><ref refid="global__variable__constants_8hpp_1ad7f1aa953dc63f3be1a546da18a3c2aa" kindref="member">mrl_result</ref>[1]<sp/>=<sp/>x_result[1]*<ref refid="global__variable__constants_8hpp_1a172789dfdaecb45defd22444f4272dc2" kindref="member">r_trans</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="global__variable__constants_8hpp_1ad7f1aa953dc63f3be1a546da18a3c2aa" kindref="member">mrl_result</ref>[2]<sp/>=<sp/><ref refid="integrate__core_8hpp_1ac44351f385d2bf728eb529d1d0a640c2" kindref="member">cal_lambda</ref>(x_result[0]/x_result[1],<sp/>x_result[2]);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(exception<sp/>&amp;){</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Invalid<sp/>value<sp/>encountered<sp/>in<sp/>get_mrl(&quot;</highlight><highlight class="normal">&lt;&lt;hc&lt;&lt;</highlight><highlight class="stringliteral">&quot;),<sp/>set<sp/>results<sp/>to<sp/>0&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="global__variable__constants_8hpp_1ad7f1aa953dc63f3be1a546da18a3c2aa" kindref="member">mrl_result</ref>[0]<sp/>=<sp/>0,<sp/><ref refid="global__variable__constants_8hpp_1ad7f1aa953dc63f3be1a546da18a3c2aa" kindref="member">mrl_result</ref>[1]<sp/>=<sp/>0,<sp/><ref refid="global__variable__constants_8hpp_1ad7f1aa953dc63f3be1a546da18a3c2aa" kindref="member">mrl_result</ref>[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="global__variable__constants_8hpp_1ad7f1aa953dc63f3be1a546da18a3c2aa" kindref="member">mrl_result</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="param__utils_8hpp_1a0e5c0924c152182239b53b638717efcc" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="param__utils_8hpp_1a0e5c0924c152182239b53b638717efcc" kindref="member">integrate_eos</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_start,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_end,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dh,<sp/><ref refid="global__variable__constants_8hpp_1a6cafdeced917cafef4bfae2ebf42f082" kindref="member">state_type</ref><sp/>*h_tb,<sp/><ref refid="global__variable__constants_8hpp_1a6cafdeced917cafef4bfae2ebf42f082" kindref="member">state_type</ref><sp/>*p_tb,<sp/><ref refid="global__variable__constants_8hpp_1a6cafdeced917cafef4bfae2ebf42f082" kindref="member">state_type</ref><sp/>*e_tb,<sp/>\</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="global__variable__constants_8hpp_1a6cafdeced917cafef4bfae2ebf42f082" kindref="member">state_type</ref><sp/>*rho_tb,<sp/><ref refid="global__variable__constants_8hpp_1a6cafdeced917cafef4bfae2ebf42f082" kindref="member">state_type</ref><sp/>*gamma_tb,<sp/><ref refid="global__variable__constants_8hpp_1a6cafdeced917cafef4bfae2ebf42f082" kindref="member">state_type</ref><sp/>*v_sq_tb){</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>h_end,<sp/>p,<sp/>e,<sp/>gamma,<sp/>rho,<sp/>v_square;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1a2ce9aef0de35008e21974dfb785c10fc" kindref="member">interp_only</ref>){</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;floor((h_end-h_start)/dh);<sp/>i++){</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="global__variable__constants_8hpp_1a623a8f9be8490ec6209c08d8e52fc929" kindref="member">coeftb_idx</ref><sp/>=<sp/>--<ref refid="global__variable__constants_8hpp_1add31440b5514ca384bc53145ccd4f1a6" kindref="member">coeftb</ref>.upper_bound(h);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="integrate__core_8hpp_1a8ad4cb6876fef3c488b0dc9067bdf035" kindref="member">ph</ref>(h),<sp/>e<sp/>=<sp/><ref refid="integrate__core_8hpp_1a5bd395991f95231deed00b9a52bffecd" kindref="member">eh</ref>(h),<sp/>rho<sp/>=<sp/>(p+e)/exp(h);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma<sp/>=<sp/><ref refid="global__variable__constants_8hpp_1a623a8f9be8490ec6209c08d8e52fc929" kindref="member">coeftb_idx</ref>-&gt;second[2]*(p/e+1.0);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_square<sp/>=<sp/>(p*gamma)/(e+p);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h_tb-&gt;push_back(h);<sp/>p_tb-&gt;push_back(p);<sp/>e_tb-&gt;push_back(e);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rho_tb-&gt;push_back(rho);<sp/>gamma_tb-&gt;push_back(gamma);<sp/>v_sq_tb-&gt;push_back(v_square);<sp/></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>-=<sp/>dh;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1adf7a1978875a4e1d3f641e1c7d13d225" kindref="member">quark_star</ref>){</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;floor((h_end-h_start)/dh);<sp/>i++){</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="quark__star__utils_8hpp_1a270550ca7295802d7a80068ad867aec0" kindref="member">ph_qks</ref>(h,<sp/><ref refid="global__variable__constants_8hpp_1a4e025832d3a1a33270a793ab654db08c" kindref="member">eos_params</ref>),<sp/>e<sp/>=<sp/><ref refid="quark__star__utils_8hpp_1ac6fc12ffe5a897dd97b16e2142ee6b48" kindref="member">eh_qks</ref>(h,<sp/>p,<sp/><ref refid="global__variable__constants_8hpp_1a4e025832d3a1a33270a793ab654db08c" kindref="member">eos_params</ref>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma<sp/>=<sp/><ref refid="quark__star__utils_8hpp_1a894121d0ec2087fe413b0a7803f2f204" kindref="member">gammah_qks</ref>(h,<sp/>p,<sp/>e,<sp/><ref refid="global__variable__constants_8hpp_1a4e025832d3a1a33270a793ab654db08c" kindref="member">eos_params</ref>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_square<sp/>=<sp/>(p*gamma)/(e+p),<sp/>rho<sp/>=<sp/>(p+e)/exp(h);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h_tb-&gt;push_back(h);<sp/>p_tb-&gt;push_back(p);<sp/>e_tb-&gt;push_back(e);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rho_tb-&gt;push_back(rho);<sp/>gamma_tb-&gt;push_back(gamma);<sp/>v_sq_tb-&gt;push_back(v_square);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>-=<sp/>dh;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector<sp/>&lt;state_type&gt;<sp/>per_o;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="global__variable__constants_8hpp_1a6cafdeced917cafef4bfae2ebf42f082" kindref="member">state_type</ref><sp/>per_c,<sp/>h_o;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="global__variable__constants_8hpp_1a6cafdeced917cafef4bfae2ebf42f082" kindref="member">state_type</ref><sp/>x0(3);<sp/>x0[0]<sp/>=<sp/><ref refid="global__variable__constants_8hpp_1adad155522ac7592916e3c332a2682963" kindref="member">p_0</ref>;<sp/>x0[1]<sp/>=<sp/><ref refid="global__variable__constants_8hpp_1a541be2f598d25b67abfecd6bd6bd918f" kindref="member">e_0</ref>;<sp/>x0[2]<sp/>=<sp/><ref refid="global__variable__constants_8hpp_1a4066e07b45853e6a2d87b1b350415257" kindref="member">rho_0</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>per_c<sp/>=<sp/><ref refid="integrate__core_8hpp_1a0b7bb81f4629a3a900a765d0d9a6f168" kindref="member">integrate_func</ref>(x0,<sp/><ref refid="integrate__core_8hpp_1a86f802d0af08d9982cd9d828e4ee52ae" kindref="member">cal_eos</ref>,<sp/><ref refid="global__variable__constants_8hpp_1a87bbbc70d878aee06e41cfacf614dfb1" kindref="member">h_0</ref>,<sp/>h_end,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;floor((h_end-h_start)/dh);<sp/>i++){</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h&gt;<ref refid="global__variable__constants_8hpp_1a87bbbc70d878aee06e41cfacf614dfb1" kindref="member">h_0</ref>){</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integrate_adaptive(<ref refid="integrate__core_8hpp_1a592868baedb54b8f932ec01e852995d4" kindref="member">controlled_stepper</ref>,<sp/><ref refid="integrate__core_8hpp_1a86f802d0af08d9982cd9d828e4ee52ae" kindref="member">cal_eos</ref>,<sp/>per_c,<sp/>h,<sp/>h-dh,<sp/>-<ref refid="global__variable__constants_8hpp_1a41540773134a59f15f5908d1167c3c3a" kindref="member">sg_step</ref>,<sp/><ref refid="structpush__back__state__and__time" kindref="compound">push_back_state_and_time</ref>(per_o,<sp/>h_o));</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p=per_o.back()[0],<sp/>e=per_o.back()[1],<sp/>rho=per_o.back()[2];</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma<sp/>=<sp/><ref refid="integrate__core_8hpp_1a1b6052908270e18510683b79741a7b8a" kindref="member">gamma_which</ref>(h,<sp/>p,<sp/>e,<sp/><ref refid="global__variable__constants_8hpp_1a4e025832d3a1a33270a793ab654db08c" kindref="member">eos_params</ref>);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_square<sp/>=<sp/>(p*gamma)/(e+p);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="global__variable__constants_8hpp_1a623a8f9be8490ec6209c08d8e52fc929" kindref="member">coeftb_idx</ref><sp/>=<sp/>--<ref refid="global__variable__constants_8hpp_1add31440b5514ca384bc53145ccd4f1a6" kindref="member">coeftb</ref>.upper_bound(h);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="integrate__core_8hpp_1a8ad4cb6876fef3c488b0dc9067bdf035" kindref="member">ph</ref>(h),<sp/>e<sp/>=<sp/><ref refid="integrate__core_8hpp_1a5bd395991f95231deed00b9a52bffecd" kindref="member">eh</ref>(h),<sp/>rho<sp/>=<sp/>(p+e)/exp(h);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma<sp/>=<sp/><ref refid="global__variable__constants_8hpp_1a623a8f9be8490ec6209c08d8e52fc929" kindref="member">coeftb_idx</ref>-&gt;second[2]*(p/e+1.0);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_square<sp/>=<sp/>(p*gamma)/(e+p);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h_tb-&gt;push_back(h);<sp/>p_tb-&gt;push_back(p);<sp/>e_tb-&gt;push_back(e);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rho_tb-&gt;push_back(rho);<sp/>gamma_tb-&gt;push_back(gamma);<sp/>v_sq_tb-&gt;push_back(v_square);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>-=<sp/>dh;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(exception<sp/>&amp;){</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>success<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>success;</highlight></codeline>
<codeline lineno="105"><highlight class="normal">}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="param__utils_8hpp_1a14167c28cd95816df5e1d80810fd7886" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="param__utils_8hpp_1a14167c28cd95816df5e1d80810fd7886" kindref="member">make_eos_table</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_start,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_end,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dh,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*f_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*unit){</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="comment">//check<sp/>whether<sp/>e,<sp/>p<sp/>have<sp/>been<sp/>correctly<sp/>interpolated,<sp/>cgs:<sp/>p,<sp/>e,<sp/>rho</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="global__variable__constants_8hpp_1a6cafdeced917cafef4bfae2ebf42f082" kindref="member">state_type</ref><sp/>h_tb,<sp/>p_tb,<sp/>e_tb,<sp/>rho_tb,<sp/>gamma_tb,<sp/>v_sq_tb;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Output<sp/>EoS<sp/>table<sp/>to<sp/>file:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;f_name&lt;&lt;endl;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>ofstream<sp/>fp(f_name);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>fp.precision(precision);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="param__utils_8hpp_1a0e5c0924c152182239b53b638717efcc" kindref="member">integrate_eos</ref>(h_start,<sp/>h_end,<sp/>dh,<sp/>&amp;h_tb,<sp/>&amp;p_tb,<sp/>&amp;e_tb,<sp/>&amp;rho_tb,<sp/>&amp;gamma_tb,<sp/>&amp;v_sq_tb);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(unit,<sp/></highlight><highlight class="stringliteral">&quot;cgs&quot;</highlight><highlight class="normal">)==0)<sp/>fp&lt;&lt;</highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="stringliteral">&quot;p/dyn*cm-2&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="stringliteral">&quot;e/erg*cm-3&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="stringliteral">&quot;(be<sp/>careful)rho/g*cm-3&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="stringliteral">&quot;gamma&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="stringliteral">&quot;v_square&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>fp&lt;&lt;</highlight><highlight class="stringliteral">&quot;h&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t\t\t&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="stringliteral">&quot;p&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t\t\t&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="stringliteral">&quot;e&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t\t\t&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="stringliteral">&quot;rho&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t\t\t&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="stringliteral">&quot;gamma&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t\t\t&quot;</highlight><highlight class="normal">&lt;&lt;</highlight><highlight class="stringliteral">&quot;v_square&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;h_tb.size();<sp/>i++){</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(unit,<sp/></highlight><highlight class="stringliteral">&quot;cgs&quot;</highlight><highlight class="normal">)==0)<sp/>{fp&lt;&lt;h_tb[i]&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal">&lt;&lt;p_tb[i]*<ref refid="global__variable__constants_8hpp_1a7c49c7d65b3c65eb7a9a457c905f6564" kindref="member">p_trans</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal">&lt;&lt;e_tb[i]*<ref refid="global__variable__constants_8hpp_1a42f01033db7468aff2667011bb543c07" kindref="member">rho_trans</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal">&lt;&lt;rho_tb[i]*<ref refid="global__variable__constants_8hpp_1a42f01033db7468aff2667011bb543c07" kindref="member">rho_trans</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal">&lt;&lt;gamma_tb[i]&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal">&lt;&lt;v_sq_tb[i]&lt;&lt;endl;}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>fp&lt;&lt;h_tb[i]&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal">&lt;&lt;p_tb[i]&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal">&lt;&lt;e_tb[i]&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal">&lt;&lt;rho_tb[i]&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal">&lt;&lt;gamma_tb[i]&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal">&lt;&lt;v_sq_tb[i]&lt;&lt;endl;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>fp.close();</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="param__utils_8hpp_1acfe1c394a95dbbf2af74a7039baef8de" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="param__utils_8hpp_1acfe1c394a95dbbf2af74a7039baef8de" kindref="member">make_tool_table</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minh,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>maxh,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dh){</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//make<sp/>m,h<sp/>table<sp/>to<sp/>accelerate<sp/>optimization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>minh;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="global__variable__constants_8hpp_1a6cafdeced917cafef4bfae2ebf42f082" kindref="member">state_type</ref><sp/>result_x(3);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>tool_fname<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;../../tool/eos_table/test_hmrl.txt&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>ofstream<sp/>ofp(tool_fname);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;floor((maxh-minh)/dh);<sp/>i++){</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result_x<sp/>=<sp/><ref refid="integrate__core_8hpp_1a11213979acaf22876fc5c366b30f6823" kindref="member">int_whole_star</ref>(h);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tidal_deform<sp/>=<sp/><ref refid="integrate__core_8hpp_1ac44351f385d2bf728eb529d1d0a640c2" kindref="member">cal_lambda</ref>(result_x[0]/result_x[1],<sp/>result_x[2]);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ofp&lt;&lt;h&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal">&lt;&lt;result_x[0]&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal">&lt;&lt;result_x[1]*<ref refid="global__variable__constants_8hpp_1a172789dfdaecb45defd22444f4272dc2" kindref="member">r_trans</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t\t&quot;</highlight><highlight class="normal">&lt;&lt;tidal_deform&lt;&lt;endl;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//tidal_deform*pow(result_x[0]*r_trans,<sp/>5),<sp/>tidal_deform,<sp/>3./2.*tidal_deform*pow(result_x[0]/result_x[1],<sp/>5)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(exception<sp/>&amp;){</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Invalid<sp/>value<sp/>encountered<sp/>in<sp/>make_tool_table,<sp/>h=&quot;</highlight><highlight class="normal">&lt;&lt;h&lt;&lt;endl;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>+=<sp/>dh;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>ofp.close();</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//constraining<sp/>eos<sp/>related</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="param__utils_8hpp_1a2fe9fce9a25e7626896dc000d3ad374a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="param__utils_8hpp_1a2fe9fce9a25e7626896dc000d3ad374a" kindref="member">check_eos</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*hc){</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//check<sp/>whether<sp/>gamma(h)&lt;7</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_lowest<sp/>=<sp/><ref refid="global__variable__constants_8hpp_1ab352375cec5c5cea5f0654ab2a1a1807" kindref="member">suggested_start_point</ref>;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h<sp/>=<sp/>*hc,<sp/>dh=0.001,<sp/>gamma,<sp/>p,<sp/>e,<sp/>v_square;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>vector<sp/>&lt;state_type&gt;<sp/>pe_o;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="global__variable__constants_8hpp_1a6cafdeced917cafef4bfae2ebf42f082" kindref="member">state_type</ref><sp/>pe_c,<sp/>h_o;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((not<sp/><ref refid="global__variable__constants_8hpp_1a2ce9aef0de35008e21974dfb785c10fc" kindref="member">interp_only</ref>)<sp/>and<sp/>(not<sp/><ref refid="global__variable__constants_8hpp_1adf7a1978875a4e1d3f641e1c7d13d225" kindref="member">quark_star</ref>)){</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="global__variable__constants_8hpp_1a6cafdeced917cafef4bfae2ebf42f082" kindref="member">state_type</ref><sp/>x0(2);<sp/>x0[0]<sp/>=<sp/><ref refid="global__variable__constants_8hpp_1adad155522ac7592916e3c332a2682963" kindref="member">p_0</ref>;<sp/>x0[1]<sp/>=<sp/><ref refid="global__variable__constants_8hpp_1a541be2f598d25b67abfecd6bd6bd918f" kindref="member">e_0</ref>;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pe_c<sp/>=<sp/><ref refid="integrate__core_8hpp_1a0b7bb81f4629a3a900a765d0d9a6f168" kindref="member">integrate_func</ref>(x0,<sp/><ref refid="integrate__core_8hpp_1a7d14308d810a0df831ad2eda66249fe0" kindref="member">outer_to_inner</ref>,<sp/><ref refid="global__variable__constants_8hpp_1a87bbbc70d878aee06e41cfacf614dfb1" kindref="member">h_0</ref>,<sp/>*hc,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i&lt;floor((*hc-h_lowest)/dh);<sp/>i++){</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1a2ce9aef0de35008e21974dfb785c10fc" kindref="member">interp_only</ref>){</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="global__variable__constants_8hpp_1a623a8f9be8490ec6209c08d8e52fc929" kindref="member">coeftb_idx</ref><sp/>=<sp/>--<ref refid="global__variable__constants_8hpp_1add31440b5514ca384bc53145ccd4f1a6" kindref="member">coeftb</ref>.upper_bound(h);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="integrate__core_8hpp_1a8ad4cb6876fef3c488b0dc9067bdf035" kindref="member">ph</ref>(h),<sp/>e<sp/>=<sp/><ref refid="integrate__core_8hpp_1a5bd395991f95231deed00b9a52bffecd" kindref="member">eh</ref>(h);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma<sp/>=<sp/><ref refid="integrate__core_8hpp_1a3c6882bb4d37f66684a037145b64abfd" kindref="member">gammah_interpolation</ref>(p,<sp/>e);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1adf7a1978875a4e1d3f641e1c7d13d225" kindref="member">quark_star</ref>){</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/><ref refid="quark__star__utils_8hpp_1a270550ca7295802d7a80068ad867aec0" kindref="member">ph_qks</ref>(h,<sp/><ref refid="global__variable__constants_8hpp_1a4e025832d3a1a33270a793ab654db08c" kindref="member">eos_params</ref>),<sp/>e<sp/>=<sp/><ref refid="quark__star__utils_8hpp_1ac6fc12ffe5a897dd97b16e2142ee6b48" kindref="member">eh_qks</ref>(h,<sp/>p,<sp/><ref refid="global__variable__constants_8hpp_1a4e025832d3a1a33270a793ab654db08c" kindref="member">eos_params</ref>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma<sp/>=<sp/><ref refid="quark__star__utils_8hpp_1a894121d0ec2087fe413b0a7803f2f204" kindref="member">gammah_qks</ref>(h,<sp/>p,<sp/>e,<sp/><ref refid="global__variable__constants_8hpp_1a4e025832d3a1a33270a793ab654db08c" kindref="member">eos_params</ref>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>integrate_adaptive(<ref refid="integrate__core_8hpp_1a592868baedb54b8f932ec01e852995d4" kindref="member">controlled_stepper</ref>,<sp/><ref refid="integrate__core_8hpp_1a7d14308d810a0df831ad2eda66249fe0" kindref="member">outer_to_inner</ref>,<sp/>pe_c,<sp/>h,<sp/>h-dh,<sp/>-<ref refid="global__variable__constants_8hpp_1a41540773134a59f15f5908d1167c3c3a" kindref="member">sg_step</ref>,<sp/><ref refid="structpush__back__state__and__time" kindref="compound">push_back_state_and_time</ref>(pe_o,<sp/>h_o));</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>pe_o.back()[0];<sp/>e<sp/>=<sp/>pe_o.back()[1];</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gamma<sp/>=<sp/><ref refid="integrate__core_8hpp_1a1b6052908270e18510683b79741a7b8a" kindref="member">gamma_which</ref>(h,<sp/>p,<sp/>e,<sp/><ref refid="global__variable__constants_8hpp_1a4e025832d3a1a33270a793ab654db08c" kindref="member">eos_params</ref>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v_square<sp/>=<sp/>(p*gamma)/(e+p);<sp/>valid<sp/>=<sp/>v_square&lt;1.;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid<sp/>&amp;=<sp/>(gamma&lt;7);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;h:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;h&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>p:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;p&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>e:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;e&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>gamma:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;gamma&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/>v^2:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;v_square&lt;&lt;endl;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valid)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>-=<sp/>dh;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(exception<sp/>&amp;){</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Invalid<sp/>value<sp/>encountered<sp/>in<sp/>check<sp/>eos&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valid)<sp/>*hc<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>valid;</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="param__utils_8hpp_1ae0c3cf3b70f141f42bcf48270238ebe7" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="param__utils_8hpp_1ae0c3cf3b70f141f42bcf48270238ebe7" kindref="member">check_mmax</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*hc,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*M_max){</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>jump_back=</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>force_jump_back=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="global__variable__constants_8hpp_1a6cafdeced917cafef4bfae2ebf42f082" kindref="member">state_type</ref><sp/>x_result(3),<sp/>x_guard(3),<sp/>x_check_again(3);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_max=3,<sp/>h_guard=4e-3,<sp/>dh=1e-2,jump_size<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h<sp/>=<sp/><ref refid="global__variable__constants_8hpp_1ab352375cec5c5cea5f0654ab2a1a1807" kindref="member">suggested_start_point</ref>+0.08;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M=0.,<sp/>M_guard=0.,<sp/>M_check_again=0.,<sp/>M_temp=0.;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//find<sp/>m_max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>)<sp/>cout&lt;&lt;endl&lt;&lt;</highlight><highlight class="stringliteral">&quot;find<sp/>maximum<sp/>mass,<sp/>with<sp/>h_min:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<ref refid="global__variable__constants_8hpp_1a7a11e492a812c7256c33d342ce4caea4" kindref="member">minimum_allowed_h</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>h_max:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;h_max&lt;&lt;endl;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(h&gt;<ref refid="global__variable__constants_8hpp_1a7a11e492a812c7256c33d342ce4caea4" kindref="member">minimum_allowed_h</ref><sp/>and<sp/>h&lt;h_max<sp/>and<sp/>jump_size&gt;=1e-3){</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jump_back)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(force_jump_back)<sp/>h<sp/>-=<sp/>jump_size;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>-=<sp/>jump_size;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jump_size<sp/>/=<sp/>5.;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>+=<sp/>jump_size;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>h<sp/>+=<sp/>jump_size;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x_result<sp/>=<sp/><ref refid="integrate__core_8hpp_1a11213979acaf22876fc5c366b30f6823" kindref="member">int_whole_star</ref>(h);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M<sp/>=<sp/>x_result[0];</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x_guard<sp/>=<sp/><ref refid="integrate__core_8hpp_1a11213979acaf22876fc5c366b30f6823" kindref="member">int_whole_star</ref>(h+h_guard);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M_guard<sp/>=<sp/>x_guard[0];</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(exception<sp/>&amp;){</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Invalid<sp/>value<sp/>encountered<sp/>in<sp/>check_mmax:<sp/>h=&quot;</highlight><highlight class="normal">&lt;&lt;h&lt;&lt;</highlight><highlight class="stringliteral">&quot;,or<sp/>h=&quot;</highlight><highlight class="normal">&lt;&lt;h+h_guard&lt;&lt;endl;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M=0;<sp/>M_guard=0;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;h:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;h&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>M:&quot;</highlight><highlight class="normal">&lt;&lt;M&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>M_guard:&quot;</highlight><highlight class="normal">&lt;&lt;M_guard&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jump_back<sp/>=<sp/>(M==0<sp/>or<sp/>M_guard==0<sp/>or<sp/>std::isnan(M_guard)<sp/>or<sp/>std::isnan(M));</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>force_jump_back<sp/>=<sp/>(M==0<sp/>or<sp/>M_guard==0);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((not<sp/>jump_back)<sp/>and<sp/>M_guard&lt;=M){</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x_check_again<sp/>=<sp/><ref refid="integrate__core_8hpp_1a11213979acaf22876fc5c366b30f6823" kindref="member">int_whole_star</ref>(h+0.01);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M_check_again<sp/>=<sp/>x_check_again[0];</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;M_check_again:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;M_check_again&lt;&lt;endl;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(M_check_again&lt;M)<sp/>{jump_back<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max(M,<sp/>M_guard)&lt;M_temp)<sp/>force_jump_back<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;}<sp/></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(exception<sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Invalid<sp/>value<sp/>encountered<sp/>in<sp/>check_mmax:<sp/>h=&quot;</highlight><highlight class="normal">&lt;&lt;h+0.01&lt;&lt;endl;}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M_temp<sp/>=<sp/>max(M,<sp/>M_guard);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;find<sp/>h:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;h&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/><sp/><sp/><sp/>with<sp/>M:&quot;</highlight><highlight class="normal">&lt;&lt;M&lt;&lt;endl&lt;&lt;endl;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(M&lt;<ref refid="global__variable__constants_8hpp_1a3de327fde01c89d6993a82ac06db5af6" kindref="member">minm_tov</ref><sp/>or<sp/>std::isnan(M)<sp/>or<sp/>h&lt;=<ref refid="global__variable__constants_8hpp_1a7a11e492a812c7256c33d342ce4caea4" kindref="member">minimum_allowed_h</ref>)<sp/>{*hc<sp/>=<sp/>-1;<sp/>*M_max=0.;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;check_mmax:<sp/>find<sp/>max<sp/>mass<sp/>error(invalid<sp/>M<sp/>or<sp/>h),<sp/>h=&quot;</highlight><highlight class="normal">&lt;&lt;h&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>M=&quot;</highlight><highlight class="normal">&lt;&lt;M&lt;&lt;endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1ac10fdca83ba95668d86ff24ac666803d" kindref="member">check_causal</ref>){</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>)<sp/>cout&lt;&lt;endl&lt;&lt;</highlight><highlight class="stringliteral">&quot;cooling:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;endl;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="param__utils_8hpp_1a2fe9fce9a25e7626896dc000d3ad374a" kindref="member">check_eos</ref>(&amp;h)){</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{M<sp/>=<sp/><ref refid="integrate__core_8hpp_1a11213979acaf22876fc5c366b30f6823" kindref="member">int_whole_star</ref>(h)[0];}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(exception&amp;){</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Invalid<sp/>value<sp/>encountered<sp/>in<sp/>check_mmax:<sp/>h_max=&quot;</highlight><highlight class="normal">&lt;&lt;h&lt;&lt;endl;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*hc<sp/>=<sp/>-1;<sp/>*M_max=0.;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(M&gt;<ref refid="global__variable__constants_8hpp_1aa8ac37cbfe75c0314bf944fa1939bef4" kindref="member">maxm_tov</ref><sp/>or<sp/>M&lt;<ref refid="global__variable__constants_8hpp_1a3de327fde01c89d6993a82ac06db5af6" kindref="member">minm_tov</ref>)<sp/>{*hc<sp/>=<sp/>-1;<sp/>*M_max=0.;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;check_mmax:<sp/>find<sp/>max<sp/>mass<sp/>error(invalid<sp/>after<sp/>cooling),<sp/>h=&quot;</highlight><highlight class="normal">&lt;&lt;h&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>M=&quot;</highlight><highlight class="normal">&lt;&lt;M&lt;&lt;endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Max<sp/>mass<sp/>after<sp/>cooling:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;M&lt;&lt;endl&lt;&lt;endl;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{*hc<sp/>=<sp/>-1;<sp/>*M_max=0.;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;check_mmax:<sp/>find<sp/>max<sp/>mass<sp/>error(check_eos<sp/>not<sp/>success),<sp/>h=&quot;</highlight><highlight class="normal">&lt;&lt;h&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>M=&quot;</highlight><highlight class="normal">&lt;&lt;M&lt;&lt;endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(M&gt;<ref refid="global__variable__constants_8hpp_1aa8ac37cbfe75c0314bf944fa1939bef4" kindref="member">maxm_tov</ref>)<sp/>{*hc<sp/>=<sp/>-1;<sp/>*M_max=0.;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;check_mmax:<sp/>find<sp/>max<sp/>mass<sp/>error(M&gt;maxm_tov),<sp/>h=&quot;</highlight><highlight class="normal">&lt;&lt;h&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>M=&quot;</highlight><highlight class="normal">&lt;&lt;M&lt;&lt;endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;}<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>*hc<sp/>=<sp/>h;<sp/>*M_max=M;<sp/></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal">}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="param__utils_8hpp_1a55d55d86595704afa06a9ad23234d8ad" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="param__utils_8hpp_1a55d55d86595704afa06a9ad23234d8ad" kindref="member">find_closest</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m_aim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_i,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_max,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*h_closest,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*lambda,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_user_start_point){</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="comment">//find<sp/>nearest<sp/>mass,<sp/>return<sp/>lambda;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>jump_back=</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>force_jump_back=</highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="global__variable__constants_8hpp_1a6cafdeced917cafef4bfae2ebf42f082" kindref="member">state_type</ref><sp/>x_result(3),<sp/>x_guard(3),<sp/>x_check_again(3);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_guard=4e-3,<sp/>dh=1e-2;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h,<sp/>h_init,<sp/>h_save,<sp/>jump_size<sp/>=<sp/>0.1;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M=0.,<sp/>M_guard=0.,<sp/>M_check_again=0.,<sp/>M_temp=0.;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_user_start_point)<sp/>h_init<sp/>=<sp/>h_i;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>h_init<sp/>=<sp/><ref refid="global__variable__constants_8hpp_1ab352375cec5c5cea5f0654ab2a1a1807" kindref="member">suggested_start_point</ref>;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>){</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;endl&lt;&lt;</highlight><highlight class="stringliteral">&quot;find<sp/>closest<sp/>aim<sp/>(known<sp/>maximum<sp/>mass):<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;m_aim&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>user<sp/>specified<sp/>start<sp/>point:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;h_i&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>suggested<sp/>start<sp/>point:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<ref refid="global__variable__constants_8hpp_1ab352375cec5c5cea5f0654ab2a1a1807" kindref="member">suggested_start_point</ref>;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>minimum_allowed_h:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<ref refid="global__variable__constants_8hpp_1a7a11e492a812c7256c33d342ce4caea4" kindref="member">minimum_allowed_h</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>use<sp/>user<sp/>start<sp/>point:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;use_user_start_point&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>h<sp/>start:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;h_init&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>h<sp/>end:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;h_max&lt;&lt;endl;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>h_init,<sp/>h_save<sp/>=<sp/>h_init;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(h&gt;<ref refid="global__variable__constants_8hpp_1a7a11e492a812c7256c33d342ce4caea4" kindref="member">minimum_allowed_h</ref><sp/>and<sp/>h&lt;h_max<sp/>and<sp/>jump_size&gt;=1e-3){</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x_result<sp/>=<sp/><ref refid="integrate__core_8hpp_1a11213979acaf22876fc5c366b30f6823" kindref="member">int_whole_star</ref>(h);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M<sp/>=<sp/>x_result[0];</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x_guard<sp/>=<sp/><ref refid="integrate__core_8hpp_1a11213979acaf22876fc5c366b30f6823" kindref="member">int_whole_star</ref>(h+h_guard);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M_guard<sp/>=<sp/>x_guard[0];</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(exception<sp/>&amp;){</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Invalid<sp/>value<sp/>encountered<sp/>in<sp/>find<sp/>nearest<sp/>mass:<sp/>h=&quot;</highlight><highlight class="normal">&lt;&lt;h&lt;&lt;endl;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M=0;<sp/>M_guard=0;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>)<sp/>cout&lt;&lt;h&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">&lt;&lt;M_guard&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal">&lt;&lt;M&lt;&lt;endl;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jump_back<sp/>=<sp/>(M==0<sp/>or<sp/>M_guard==0<sp/>or<sp/>std::isnan(M_guard)<sp/>or<sp/>std::isnan(M)<sp/>or<sp/>max(M,<sp/>M_guard)&gt;m_aim);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>force_jump_back<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((not<sp/>jump_back)<sp/>and<sp/>M_guard&lt;=M){</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x_check_again<sp/>=<sp/><ref refid="integrate__core_8hpp_1a11213979acaf22876fc5c366b30f6823" kindref="member">int_whole_star</ref>(h+0.01);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M_check_again<sp/>=<sp/>x_check_again[0];</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;M_check_again:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;M_check_again&lt;&lt;endl;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(M_check_again&lt;M)<sp/>{jump_back<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max(M,<sp/>M_guard)&lt;M_temp)<sp/>force_jump_back=</highlight><highlight class="keyword">true</highlight><highlight class="normal">;}<sp/></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(exception<sp/>&amp;)<sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Invalid<sp/>value<sp/>encountered<sp/>in<sp/>find<sp/>maximum<sp/>mass:<sp/>h=&quot;</highlight><highlight class="normal">&lt;&lt;h+0.01&lt;&lt;endl;}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h_save<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jump_back)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(force_jump_back)<sp/>h<sp/>-=<sp/>jump_size;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>-=<sp/>jump_size;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jump_size<sp/>/=<sp/>5.;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>+=<sp/>jump_size;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>h<sp/>+=<sp/>jump_size;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M_temp<sp/>=<sp/>max(M,<sp/>M_guard);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;find<sp/>h:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;h_save&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/><sp/><sp/><sp/>with<sp/>M:&quot;</highlight><highlight class="normal">&lt;&lt;M&lt;&lt;endl&lt;&lt;endl;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::isnan(M)<sp/>or<sp/>h_save&lt;=<ref refid="global__variable__constants_8hpp_1a7a11e492a812c7256c33d342ce4caea4" kindref="member">minimum_allowed_h</ref><sp/>or<sp/>force_jump_back)<sp/>{*h_closest<sp/>=<sp/>-1;<sp/>*lambda=0;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*h_closest<sp/>=<sp/>h_save;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x_result[0]&gt;0.<sp/>and<sp/>x_result[1]&gt;0.)<sp/>*lambda<sp/>=<sp/><ref refid="integrate__core_8hpp_1ac44351f385d2bf728eb529d1d0a640c2" kindref="member">cal_lambda</ref>(x_result[0]/x_result[1],<sp/>x_result[2]);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>*lambda<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="319"><highlight class="normal">}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="param__utils_8hpp_1addc6708baf1b3023282c5f1a83a8608a" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="param__utils_8hpp_1addc6708baf1b3023282c5f1a83a8608a" kindref="member">find_closest_with_maxm_known</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>known_aim,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_i,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_max,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*h_closest,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*unknown,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_type,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_user_start_point){</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>jump_back<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="global__variable__constants_8hpp_1a6cafdeced917cafef4bfae2ebf42f082" kindref="member">state_type</ref><sp/>x_result(3);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h_guard=4e-3,<sp/>dh=1e-2;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h,<sp/>h_init,<sp/>h_save,<sp/>jump_size=0.1,<sp/>test_known=0.;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(use_user_start_point)<sp/>h_init<sp/>=<sp/>h_i;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>h_init<sp/>=<sp/><ref refid="global__variable__constants_8hpp_1ab352375cec5c5cea5f0654ab2a1a1807" kindref="member">suggested_start_point</ref>;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#define<sp/>fail_process()<sp/>*h_closest<sp/>=<sp/>-1;<sp/>*unknown=0;<sp/>return<sp/>false;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(get_type!=1<sp/>and<sp/>get_type!=2<sp/>and<sp/>get_type!=3)<sp/>{cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;not<sp/>known<sp/>parameter<sp/>value<sp/>of<sp/>get_type(in<sp/>func<sp/>find_closest_with_mmax_known):<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;get_type&lt;&lt;endl;<sp/><ref refid="param__utils_8hpp_1a54b1ccb702b0746a0fb52c4862210696" kindref="member">fail_process</ref>();}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>){</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;endl&lt;&lt;</highlight><highlight class="stringliteral">&quot;find<sp/>closest<sp/>aim<sp/>(known<sp/>maximum<sp/>mass):<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;known_aim&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>user<sp/>specified<sp/>start<sp/>point:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;h_i&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>suggested<sp/>start<sp/>point:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<ref refid="global__variable__constants_8hpp_1ab352375cec5c5cea5f0654ab2a1a1807" kindref="member">suggested_start_point</ref>;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>minimum_allowed_h:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<ref refid="global__variable__constants_8hpp_1a7a11e492a812c7256c33d342ce4caea4" kindref="member">minimum_allowed_h</ref>&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>use<sp/>user<sp/>start<sp/>point:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;use_user_start_point&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>h<sp/>start:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;h_init&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>h<sp/>end:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;h_max&lt;&lt;endl;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>h_init,<sp/>h_save<sp/>=<sp/>h_init;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(h&gt;<ref refid="global__variable__constants_8hpp_1a7a11e492a812c7256c33d342ce4caea4" kindref="member">minimum_allowed_h</ref><sp/>and<sp/>h&lt;h_max<sp/>and<sp/>jump_size&gt;=1e-4){</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x_result<sp/>=<sp/><ref refid="integrate__core_8hpp_1a11213979acaf22876fc5c366b30f6823" kindref="member">int_whole_star</ref>(h);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(get_type==1<sp/>or<sp/>get_type==2)<sp/>test_known<sp/>=<sp/>x_result[0];</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(get_type==3)<sp/>test_known<sp/>=<sp/><ref refid="integrate__core_8hpp_1ac44351f385d2bf728eb529d1d0a640c2" kindref="member">cal_lambda</ref>(x_result[0]/x_result[1],<sp/>x_result[2]);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(exception<sp/>&amp;){</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;Invalid<sp/>value<sp/>encountered<sp/>in<sp/>find<sp/>nearest<sp/>mass:<sp/>h=&quot;</highlight><highlight class="normal">&lt;&lt;h&lt;&lt;endl;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test_known=0;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;step:&quot;</highlight><highlight class="normal">&lt;&lt;iter&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>,h:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;h&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/>,M:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;test_known&lt;&lt;endl;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(get_type==3)<sp/>jump_back<sp/>=<sp/>(test_known==0<sp/>or<sp/>std::isnan(test_known)<sp/>or<sp/>test_known&lt;known_aim);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>jump_back<sp/>=<sp/>(test_known==0<sp/>or<sp/>std::isnan(test_known)<sp/>or<sp/>test_known&gt;known_aim);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h!=h_init)<sp/>jump_back<sp/>|=<sp/>(h+jump_size&gt;h_max);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jump_back<sp/>and<sp/>(iter==0))<sp/>jump_size<sp/>=<sp/>h-<ref refid="global__variable__constants_8hpp_1a7a11e492a812c7256c33d342ce4caea4" kindref="member">minimum_allowed_h</ref>;}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h_save<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(jump_back)<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>-=<sp/>jump_size;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>jump_size<sp/>/=<sp/>5.;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>+=<sp/>jump_size;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>h<sp/>+=<sp/>jump_size;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>iter<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="global__variable__constants_8hpp_1ab3f078684998b83967d507d0f453f454" kindref="member">verbose</ref>)<sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;aim:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;known_aim&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>h:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;h_save&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>used<sp/>steps:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;iter&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>test_known:&quot;</highlight><highlight class="normal">&lt;&lt;test_known&lt;&lt;endl;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::isnan(test_known)<sp/>or<sp/>h_save&lt;=<ref refid="global__variable__constants_8hpp_1a7a11e492a812c7256c33d342ce4caea4" kindref="member">minimum_allowed_h</ref>)<sp/>{<ref refid="param__utils_8hpp_1a54b1ccb702b0746a0fb52c4862210696" kindref="member">fail_process</ref>();}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*h_closest<sp/>=<sp/>h_save;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(x_result[0]&gt;0.<sp/>and<sp/>x_result[1]&gt;0.)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(get_type==1)<sp/>{*unknown<sp/>=<sp/><ref refid="integrate__core_8hpp_1ac44351f385d2bf728eb529d1d0a640c2" kindref="member">cal_lambda</ref>(x_result[0]/x_result[1],<sp/>x_result[2]);}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(get_type==2)<sp/>{*unknown<sp/>=<sp/>x_result[1]*<ref refid="global__variable__constants_8hpp_1a172789dfdaecb45defd22444f4272dc2" kindref="member">r_trans</ref>;}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(get_type==3)<sp/>{*unknown<sp/>=<sp/>x_result[0];}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>*unknown<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="param__utils_8hpp_1ab3c5a1a854e42b8e307ade519a977980" refkind="member"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="param__utils_8hpp_1ab3c5a1a854e42b8e307ade519a977980" kindref="member">get_unknowns_from_knowns</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>known1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>known2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*unknown1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*unknown2,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*h_max,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>get_type){</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h1=0.,<sp/>h2=0.,<sp/>M_max=0.,<sp/>L_max=0.;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>*unknown1<sp/>=<sp/>0.;<sp/>*unknown2<sp/>=<sp/>0.;<sp/>*h_max=0.;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(not<sp/><ref refid="param__utils_8hpp_1ae0c3cf3b70f141f42bcf48270238ebe7" kindref="member">check_mmax</ref>(h_max,<sp/>&amp;M_max))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(get_type==1<sp/>or<sp/>get_type==2){</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((known1&gt;M_max)<sp/>or<sp/>(known2&gt;M_max))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(get_type==3){</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="param__utils_8hpp_1a868be24c590ade0f629c8d2135ab0229" kindref="member">get_mrl</ref>(*h_max);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L_max<sp/>=<sp/><ref refid="global__variable__constants_8hpp_1ad7f1aa953dc63f3be1a546da18a3c2aa" kindref="member">mrl_result</ref>[2];</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((known1&lt;L_max)<sp/>or<sp/>(known2&lt;L_max))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout&lt;&lt;</highlight><highlight class="stringliteral">&quot;not<sp/>known<sp/>parameter<sp/>value<sp/>of<sp/>get_type(in<sp/>func<sp/>get_unkowns_from_knowns):<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;get_type&lt;&lt;endl;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(known1&lt;known2){</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="param__utils_8hpp_1addc6708baf1b3023282c5f1a83a8608a" kindref="member">find_closest_with_maxm_known</ref>(known1,<sp/><ref refid="global__variable__constants_8hpp_1ab352375cec5c5cea5f0654ab2a1a1807" kindref="member">suggested_start_point</ref>,<sp/>*h_max,<sp/>&amp;h1,<sp/>unknown1,<sp/>get_type))<sp/><ref refid="param__utils_8hpp_1addc6708baf1b3023282c5f1a83a8608a" kindref="member">find_closest_with_maxm_known</ref>(known2,<sp/>h1,<sp/>*h_max,<sp/>&amp;h2,<sp/>unknown2,<sp/>get_type);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="param__utils_8hpp_1addc6708baf1b3023282c5f1a83a8608a" kindref="member">find_closest_with_maxm_known</ref>(known2,<sp/><ref refid="global__variable__constants_8hpp_1ab352375cec5c5cea5f0654ab2a1a1807" kindref="member">suggested_start_point</ref>,<sp/>*h_max,<sp/>&amp;h2,<sp/>unknown2,<sp/>get_type);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(known1&gt;known2){</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="param__utils_8hpp_1addc6708baf1b3023282c5f1a83a8608a" kindref="member">find_closest_with_maxm_known</ref>(known2,<sp/><ref refid="global__variable__constants_8hpp_1ab352375cec5c5cea5f0654ab2a1a1807" kindref="member">suggested_start_point</ref>,<sp/>*h_max,<sp/>&amp;h2,<sp/>unknown2,<sp/>get_type))<sp/><ref refid="param__utils_8hpp_1addc6708baf1b3023282c5f1a83a8608a" kindref="member">find_closest_with_maxm_known</ref>(known1,<sp/>h2,<sp/>*h_max,<sp/>&amp;h1,<sp/>unknown1,<sp/>get_type);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/><ref refid="param__utils_8hpp_1addc6708baf1b3023282c5f1a83a8608a" kindref="member">find_closest_with_maxm_known</ref>(known1,<sp/><ref refid="global__variable__constants_8hpp_1ab352375cec5c5cea5f0654ab2a1a1807" kindref="member">suggested_start_point</ref>,<sp/>*h_max,<sp/>&amp;h1,<sp/>unknown1,<sp/>get_type);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="param__utils_8hpp_1addc6708baf1b3023282c5f1a83a8608a" kindref="member">find_closest_with_maxm_known</ref>(known1,<sp/><ref refid="global__variable__constants_8hpp_1ab352375cec5c5cea5f0654ab2a1a1807" kindref="member">suggested_start_point</ref>,<sp/>*h_max,<sp/>&amp;h1,<sp/>unknown1,<sp/>get_type);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*unknown2<sp/>=<sp/>*unknown1;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*unknown1&gt;0.<sp/>and<sp/>*unknown2&gt;0.)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal">}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/jiangjinliang/work/try/Spectral_EoS/code/eostool/param_utils.hpp"/>
  </compounddef>
</doxygen>
